[
  {
    "title": "Core Architecture & Authentication System",
    "description": "Establish the foundational Flutter project architecture with feature-based modular structure, implement Supabase integration, and build the complete authentication system including splash, onboarding, login, signup, and password reset flows.",
    "details": "Initialize Flutter project with proper folder structure (lib/src/features, core, services). Set up all required dependencies including supabase_flutter, flutter_riverpod, go_router, freezed_annotation, json_serializable. Create design system with theme.dart and typography.dart. Implement AuthService with Supabase Auth integration supporting email/password and Google OAuth. Build authentication screens (SplashScreen, OnboardingPage, LoginPage, SignupPage, ResetPasswordPage) with real-time input validation. Set up Riverpod AuthProvider for session management and implement Lottie animations for onboarding transitions. Configure Supabase with proper RLS policies and create initial database schema.",
    "status": "pending",
    "test_strategy": "Unit tests for AuthService methods, widget tests for authentication screens, integration tests for complete auth flow including session persistence. Test RLS policies to ensure proper security isolation.",
    "priority": "high",
    "ordinal": 0,
    "task_group_id": "5ad09f0c-d069-4721-9765-b1119418c484",
    "parent_task_id": null,
    "ai_result": null,
    "id": "226ef128-903e-44d4-9b26-a3e3c6f4b6d7",
    "created_at": "2025-10-31T16:44:19.685109Z",
    "user_id": "user_34pgFm2jgnbEtAu8xE0bzS8HxvJ",
    "subtasks": []
  },
  {
    "title": "User Profile & Social Features",
    "description": "Implement user profile management, follow system, and core social interactions including profile display, editing capabilities, and follow/unfollow functionality with real-time updates.",
    "details": "Create public.users and public.follows tables with proper indexing and constraints. Build ProfilePage displaying user data, post counts, and post grid. Implement EditProfilePage with profile photo upload to Supabase Storage, bio/username editing with validation. Create follow/unfollow system with UNIQUE constraints to prevent duplicates. Set up database triggers for automatic notification creation on new follows. Implement cached_network_image for profile photos and create responsive profile layouts. Use Riverpod providers for profile state management and real-time follow count updates.",
    "status": "pending",
    "test_strategy": "Unit tests for follow/unfollow logic, widget tests for profile screens, integration tests for profile editing flow including image upload. Test database constraints and RLS policies for user data access.",
    "priority": "high",
    "ordinal": 1,
    "task_group_id": "5ad09f0c-d069-4721-9765-b1119418c484",
    "parent_task_id": null,
    "ai_result": null,
    "id": "d6eb945a-4bec-4e8a-96fb-25a715615694",
    "created_at": "2025-10-31T16:44:19.685116Z",
    "user_id": "user_34pgFm2jgnbEtAu8xE0bzS8HxvJ",
    "subtasks": []
  },
  {
    "title": "Feed System & Post Creation",
    "description": "Build the main feed with infinite scroll, post creation functionality with media upload and compression, and implement the bottom navigation structure with GoRouter integration.",
    "details": "Set up GoRouter with BottomNavigationBar for main app navigation (Home, Explore, NewPost, Notifications, Profile). Create public.posts and public.post_tags tables. Build FeedPage with infinite scroll pagination, Shimmer loading states, and real-time post updates via Supabase Realtime. Implement PostCard widget with cached media display using cached_network_image and video_player. Create NewPostPage with image_picker integration, client-side media compression, and Supabase Storage upload to media-private bucket. Add caption writing, user tagging (@username parsing), and post metadata handling. Subscribe to real-time updates for new posts in feed.",
    "status": "pending",
    "test_strategy": "Unit tests for post creation logic and media compression, widget tests for feed components and post cards, integration tests for complete post creation flow including media upload and real-time feed updates.",
    "priority": "high",
    "ordinal": 2,
    "task_group_id": "5ad09f0c-d069-4721-9765-b1119418c484",
    "parent_task_id": null,
    "ai_result": null,
    "id": "d123d0da-c121-40a0-8ec0-bad973aeb181",
    "created_at": "2025-10-31T16:44:19.685118Z",
    "user_id": "user_34pgFm2jgnbEtAu8xE0bzS8HxvJ",
    "subtasks": []
  },
  {
    "title": "Interactive Features & Stories",
    "description": "Implement likes, comments, save functionality, and stories feature with real-time updates, gesture navigation, and automatic cleanup via Supabase Edge Functions.",
    "details": "Create public.comments, public.likes, public.saved_posts, and public.stories tables with proper constraints. Build LikeButton with heart-pop animation, CommentList modal/page, and SaveButton functionality. Implement real-time updates for like counts and new comments using Supabase Realtime. Create stories carousel above feed with full-screen viewer, gesture navigation (tap left/right, swipe), and 30-second video limit. Set up stories upload to Storage with expires_at timestamp. Create Supabase Edge Function (Cron Job) for automatic cleanup of expired stories from both database and storage. Add archive functionality for posts with is_archived flag.",
    "status": "pending",
    "test_strategy": "Unit tests for like/comment/save operations, widget tests for interactive components and story viewer, integration tests for real-time updates and story lifecycle including automatic cleanup.",
    "priority": "medium",
    "ordinal": 3,
    "task_group_id": "5ad09f0c-d069-4721-9765-b1119418c484",
    "parent_task_id": null,
    "ai_result": null,
    "id": "131e8ea4-f543-4745-a95c-5d441c6d6db2",
    "created_at": "2025-10-31T16:44:19.685120Z",
    "user_id": "user_34pgFm2jgnbEtAu8xE0bzS8HxvJ",
    "subtasks": []
  },
  {
    "title": "Search, Chat & Notifications System",
    "description": "Implement search and explore functionality, direct messaging system with real-time chat, and comprehensive notification system with both in-app and push notifications via FCM.",
    "details": "Build SearchPage/ExplorePage with debounced search across users and posts, and explore grid of popular content. Create public.messages and public.notifications tables. Implement ChatListPage and ChatDetailPage with deterministic conversation_id generation for 1-to-1 chats. Set up real-time messaging with Supabase Realtime filtered by conversation_id, including message status tracking (sent/delivered/read). Build NotificationPage displaying in-app notifications with read status management and badge system on BottomNav. Configure FCM and create Supabase Edge Function triggered by database webhooks to send push notifications for likes, comments, follows, tags, and messages. Implement proper notification payload handling and deep linking.",
    "status": "pending",
    "test_strategy": "Unit tests for search logic and conversation_id generation, widget tests for chat interface and notification components, integration tests for complete messaging flow and push notification delivery. Test real-time message synchronization across multiple devices.",
    "priority": "medium",
    "ordinal": 4,
    "task_group_id": "5ad09f0c-d069-4721-9765-b1119418c484",
    "parent_task_id": null,
    "ai_result": null,
    "id": "26bdde0f-6daf-4455-b588-e5b6bfacd0dc",
    "created_at": "2025-10-31T16:44:19.685121Z",
    "user_id": "user_34pgFm2jgnbEtAu8xE0bzS8HxvJ",
    "subtasks": []
  }
]